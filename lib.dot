# Requires ${DOTFILES_DIR}
# Source after "${DOTFILES_DIR}/detect_docker.dot"
# One day I'll convert this to pwsh so it can run on Windows as well.

function symlink()
{
  local -r target=${1}; shift
  local -r link=${1}; shift
  local force=${1:-0}

  if [[ "0" != "${force}" ]]; then
    force=1
  fi

  local flags="-s"
  if [[ 0 != ${force} ]]; then
    flags="${flags}f"
  fi

  if [[ ! -e "${link}" || 1 == ${force} ]]; then
    ln ${flags} "${target}" "${link}"
  fi
}


function dotfiles_install_cargo()
{
  local home=${1:-${HOME}}

  symlink "${DOTFILES_DIR}/cargo" "${home}/.cargo"

  source "${DOTFILES_DIR}/cargo/env"
  if [[ "$(which rustup)" == "" ]]; then
    echo "Cargo configuration files are setup, but rustup is not installed.  To install it, run:"
    echo "  curl https://sh.rustup.rs -sSf | sh"
    echo
    echo "Then, toolchains from ~/.cargo/config can be installed by running (example)"
    echo "  rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android"
  fi
}

function dotfiles_install_proc()
{
  local home=${1:-${HOME}}

  symlink "${DOTFILES_DIR}/config/procs" "${home}/.config/procs"
}

function dotfiles_install_netrc()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR}/dotfiles-secret}

  if [[ -e "${dotfiles_secret_dir}" ]]; then
    chmod 600 "${dotfiles_secret_dir}/global/netrc"
    symlink "${dotfiles_secret_dir}/global/netrc" "${home}/.netrc"
  fi
}

function dotfiles_install_gnupg()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR}/dotfiles-secret}

  if [[ ! -e "${home}/.gnupg" ]]; then
    mkdir -p "${home}/.gnupg"
    chmod 700 "${home}/.gnupg"
  fi

  symlink "${DOTFILES_DIR}/gnupg/gpg-agent.conf" "${home}/.gnupg/gpg-agent.conf"
  if [[ -e "${dotfiles_secret_dir}" ]]; then
    symlink "${dotfiles_secret_dir}/global/gnupg/sshcontrol" "${home}/.gnupg/sshcontrol"
  fi
}

function dotfiles_install_docker_config()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR}/dotfiles-secret}

  if [[ -e "${dotfiles_secret_dir}" && -e "${home}/.docker" && ! -e "${home}/.docker/config.json" ]]; then
    symlink "${dotfiles_secret_dir}/docker" "${home}/.docker"
  fi
}

function dotfiles_install_nvim()
{
  local home=${1:-${HOME}}

  # Setup nvim config (symlink entire directory)
  mkdir -p "${home}/.config/"
  symlink "${DOTFILES_DIR}/config/nvim" "${home}/.config/nvim"
  symlink "${DOTFILES_DIR}/vimrc" "${home}/.config/nvim/init.vim"
}

function dotfiles_install_tpm()
{
  local home=${1:-${HOME}}

  if [[ ! -e "${home}/.tmux/plugins/tpm" ]]; then
    if [[ "$(which tmux)" != "" ]]; then
      mkdir -p "${home}/.tmux/plugins"
      git clone https://github.com/tmux-plugins/tpm "${home}/.tmux/plugins/tpm"
    fi
  fi
}

function dotfiles_install_zplug()
{
  local home=${1:-${HOME}}
  local tmp=${2:-$(mktemp -d)}

  if [[ ! -e "${home}/.zplug" ]]; then
    if [[ "1" == "$(detect_docker)" ]]; then
      git_proxy_args=""
      if [[ "" != "${http_proxy}" ]]; then
        git_proxy_args="--config=http.proxy=${http_proxy}"
      fi
      git clone ${git_proxy_args} https://github.com/zplug/zplug.git "${home}/.zplug"
      if [[ $? != 0 ]]; then
        echo "Couldn't clone zplug repo.  Is there a proxy blocking it?  Proxy env is:"
        env | grep -i proxy
      fi
    else
      curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh > "${tmp}/install_zplug.sh"
      if [[ $? == 0 ]]; then
        zsh "${tmp}/install_zplug.sh"
      else
        echo "Couldn't download zplug installer.  Is there a proxy blocking it?  Proxy env is:"
        env | grep -i proxy
      fi
    fi
  fi
}

function dotfiles_install_rofi()
{
  local home=${1:-${HOME}}

  symlink "${DOTFILES_DIR}/config/rofi" "${home}/.config/rofi"
}

function dotfiles_install_rofipass()
{
  local home=${1:-${HOME}}

  symlink "${DOTFILES_DIR}/config/rofi-pass" "${home}/.config/"
}

function assemble_i3_config()
{
    local parts_dir=${1:-${DOTFILES_DIR}/config/i3}
    local dest=${2:-${HOME}/.config/i3/config}

    local files=($(find "${parts_dir}" -iname '*-common*.part' -or -iname \*$(hostname)\*.part | sort))
    if [[ -e "${dest}" ]]; then
        rm "${dest}"
    fi
    for f in ${files[@]}; do
        echo -e "\n\n#\n# Include: ${f}\n#\n" >> "${dest}"
        cat "${f}" >> "${dest}"
        echo -e "\n#\n# /Include: ${f}\n#\n\n" >> "${dest}"
    done
}

function dotfiles_install_i3()
{
  local home=${1:-${HOME}}

  if [[ "$(which i3)" != "" ]]; then
    mkdir -p "${home}/.config/i3"
    assemble_i3_config "${DOTFILES_DIR}/config/i3" "${home}/.config/i3/config"
    mkdir -p "${home}/.screenlayout"
    symlink "${DOTFILES_DIR}/screenlayout/$(hostname).sh" "${home}/.screenlayout/host.sh" 1
  fi

  if [[ ! -e "${home}/bin" ]]; then
    mkdir -p "${home}/bin"
  fi

  cat <<TOHERE > "${home}/bin/do_lock.sh"
#!/bin/bash

# Shuts the screen off the first time, but after a period of inactivity
# Assumes i3lock-fancy-rapid is installed
if [[ -e /usr/local/bin/i3lock-fancy-rapid ]]; then
  /usr/local/bin/i3lock-fancy-rapid 5 3 -t "Enter Password" -k --indicator -e \
      & sleep 5 \
      && xset dpms force off
else
  echo "i3lock-fancy-rapid not installed"
fi
TOHERE
}

function dotfiles_install_dein()
{
  local home=${1:-${HOME}}
  local tmp=${2:-$(mktemp -d)}

  if [[ ! -e "${DOTFILES_DIR}/bundles/dein" ]]; then
    curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > "${tmp}/install_dein.sh"
    if [[ $? == 0 ]]; then
      sh "${tmp}/install_dein.sh" "${DOTFILES_DIR}/bundles/dein"
    else
      echo "Couldn't download dein installer.  Is there a proxy blocking it?  Proxy env is:"
      env | grep -i proxy
    fi
  fi
}

# vim: ts=2 sw=2 sts=0 ff=unix expandtab ft=sh :
