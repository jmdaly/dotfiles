# Requires ${DOTFILES_DIR:-${HOME}/dotfiles}
# Source after "${DOTFILES_DIR:-${HOME}/dotfiles}/detect_docker.dot"
# One day I'll convert this to pwsh so it can run on Windows as well.

function symlink()
{
  local -r target=${1}; shift
  local -r link=${1}; shift
  local force=${1:-0}

  if [[ "0" != "${force}" ]]; then
    force=1
  fi

  local flags="-s"
  if [[ 0 != ${force} ]]; then
    flags="${flags}f"
  fi

  if [[ ! -e "${link}" || 1 == ${force} ]]; then
    ln ${flags} "${target}" "${link}"
  fi
}

function install_powerline_fonts()
{
  local home=${1:-${HOME}};
  local DFTMP=${2:-"$(mktemp -d)"}

  if [[ $HOME != *com.termux* ]]; then
    # For now at least, don't install powerline fonts on termux
    mkdir -p "${home}/.local/share/fonts"
    # Install fonts
    if [[ "$(ls ${home}/.local/share/fonts | grep powerline | wc -l)" -lt 3 ]]; then
      git clone https://github.com/powerline/fonts.git "${DFTMP}/powerline_fonts"
      ${DFTMP}/powerline_fonts/install.sh
    fi
    # apt-get install ttf-ancient-fonts -y
    # install http://input.fontbureau.com/download/  and http://larsenwork.com/monoid/ Hack the powerline font install script to mass install

    # Install nerd-fonts
    if [[ "$(ls ${home}/.local/share/fonts | grep NerdFonts | wc -l)" -lt 3 ]]; then
      if [[ ! -e "${DFTMP}/nerd_fonts/nerd_fonts" ]]; then
        git clone https://github.com/ryanoasis/nerd-fonts "${DFTMP}/nerd_fonts"
      fi
      ${DFTMP}/nerd_fonts/install.sh Meslo
    fi
  fi

}

function dotfiles_install_cargo()
{
  local home=${1:-${HOME}}

  symlink "${DOTFILES_DIR:-${HOME}/dotfiles}/cargo" "${home}/.cargo"

  source "${DOTFILES_DIR:-${HOME}/dotfiles}/cargo/env"
  if [[ "$(which rustup)" == "" ]]; then
    echo "Cargo configuration files are setup, but rustup is not installed.  To install it, run:"
    echo "  curl https://sh.rustup.rs -sSf | sh"
    echo
    echo "Then, toolchains from ~/.cargo/config can be installed by running (example)"
    echo "  rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android"
  fi
}

function dotfiles_install_netrc()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR:-${HOME}/dotfiles}/dotfiles-secret}

  if [[ -e "${dotfiles_secret_dir}" ]]; then
    chmod 600 "${dotfiles_secret_dir}/global/netrc"
    symlink "${dotfiles_secret_dir}/global/netrc" "${home}/.netrc"
  fi
}

function dotfiles_install_gnupg()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR:-${HOME}/dotfiles}/dotfiles-secret}

	stow -d "${DOTFILES_DIR}/stow" -t "${home}" gnupg

  if [[ -e "${dotfiles_secret_dir}" ]]; then
    symlink "${dotfiles_secret_dir}/global/gnupg/sshcontrol" "${home}/.gnupg/sshcontrol"
  fi
}

function dotfiles_install_docker_config()
{
  local home=${1:-${HOME}}
  local dotfiles_secret_dir=${2:-${DOTFILES_DIR:-${HOME}/dotfiles}/dotfiles-secret}

  if [[ -e "${dotfiles_secret_dir}" && -e "${home}/.docker" && ! -e "${home}/.docker/config.json" ]]; then
    symlink "${dotfiles_secret_dir}/docker" "${home}/.docker"
  fi
}

function dotfiles_install_tpm()
{
  local home=${1:-${HOME}}

  if [[ ! -e "${home}/.tmux/plugins/tpm" ]]; then
    if [[ "$(which tmux)" != "" ]]; then
      mkdir -p "${home}/.tmux/plugins"
      git clone https://github.com/tmux-plugins/tpm "${home}/.tmux/plugins/tpm"
    fi
  fi
}

function dotfiles_install_zplug()
{
  local home=${1:-${HOME}}
  local tmp=${2:-$(mktemp -d)}

  if [[ ! -e "${home}/.zplug" ]]; then
    if [[ "1" == "$(detect_docker)" ]]; then
      git_proxy_args=""
      if [[ "" != "${http_proxy}" ]]; then
        git_proxy_args="--config=http.proxy=${http_proxy}"
      fi
      git clone ${git_proxy_args} https://github.com/zplug/zplug.git "${home}/.zplug"
      if [[ $? != 0 ]]; then
        echo "Couldn't clone zplug repo.  Is there a proxy blocking it?  Proxy env is:"
        env | grep -i proxy
      fi
    else
      curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh > "${tmp}/install_zplug.sh"
      if [[ $? == 0 ]]; then
        zsh "${tmp}/install_zplug.sh"
      else
        echo "Couldn't download zplug installer.  Is there a proxy blocking it?  Proxy env is:"
        env | grep -i proxy
      fi
    fi
  fi
}

function dotfiles_install_i3_config()
{
  local i3_dir=${1:-${DOTFILES_DIR:-${HOME}/dotfiles}/stow/i3/.config/i3}
  ln -s ${i3_dir}/$(hostname).i3 ${i3_dir}/config
  symlink "${i3_dir}/$(hostname).i3" "${i3_dir}/config" 1
}

function assemble_i3_config()
{
  # DEPRECATED
  # This was used before i3 supported "include"

  local parts_dir=${1:-${DOTFILES_DIR:-${HOME}/dotfiles}/config/i3}
  local dest=${2:-${HOME}/.config/i3/config}

  local files=($(find "${parts_dir}" -iname '*-common*.part' -or -iname \*$(hostname)\*.part | sort))
  if [[ -e "${dest}" ]]; then
    rm "${dest}"
  fi
  for f in ${files[@]}; do
    echo -e "\n\n#\n# Include: ${f}\n#\n" >> "${dest}"
    cat "${f}" >> "${dest}"
    echo -e "\n#\n# /Include: ${f}\n#\n\n" >> "${dest}"
  done
}

function dotfiles_install_i3()
{
  local home=${1:-${HOME}}
  if [[ "1" == "$(_exists i3)" ]]; then
    mkdir -p "${home}/.config/i3"
    dotfiles_install_i3_config "${DOTFILES_DIR:-${HOME}/dotfiles}/stow/i3/.config/i3"
    mkdir -p "${home}/.screenlayout"
    symlink "${DOTFILES_DIR:-${HOME}/dotfiles}/stow/screenlayout/.screenlayout/host.sh" "${home}/.screenlayout/$(hostname).sh" 1
  fi

  if [[ ! -e "${home}/bin" ]]; then
    mkdir -p "${home}/bin"
  fi

  cat <<TOHERE > "${home}/bin/do_lock.sh"
#!/bin/bash

#
# This file is auto-generated by the dotfiles setup.

# Shuts the screen off the first time, but after a period of inactivity
# Assumes i3lock-fancy-rapid is installed
if [[ -e /usr/local/bin/i3lock-fancy-rapid ]]; then
  /usr/local/bin/i3lock-fancy-rapid 5 3 \\
      -t "Enter Password" --clock --indicator --ignore-empty-password \\
      --pass-media-keys \\
      --insidecolor=ffffff1c --ringcolor=ffffff3e \\
    & sleep 3 \\
    && xset dpms force off
else
  echo "i3lock-fancy-rapid not installed"
fi
TOHERE
  chmod u+x "${home}/bin/do_lock.sh"
}

function dotfiles_install_dein()
{
  local home=${1:-${HOME}}
  local tmp=${2:-$(mktemp -d)}

  if [[ ! -e "${DOTFILES_DIR:-${HOME}/dotfiles}/bundles/dein" ]]; then
    curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > "${tmp}/install_dein.sh"
    if [[ $? == 0 ]]; then
      sh "${tmp}/install_dein.sh" "${DOTFILES_DIR:-${HOME}/dotfiles}/bundles/dein"
    else
      echo "Couldn't download dein installer.  Is there a proxy blocking it?  Proxy env is:"
      env | grep -i proxy
    fi
  fi
}

function dotfiles_install_kotlin_language_server()
{
  local home=${1:-${HOME}};
  local version=${2:-1.1.1};
  local build_dir=${3:-"${home}/build"};

  if [[ ! -e "${build_dir}" ]]; then
    mkdir -p "${build_dir}"
  fi

  if [[ ! -e "${build_dir}/kotlin-language-server" ]]; then
    git clone --branch "${version}" https://github.com/fwcd/kotlin-language-server.git "${build_dir}/kotlin-language-server"
  else
    pushd .
    cd "${build_dir}/kotlin-language-server"
    git fetch --tags
    git reset --hard ${version}
    popd
  fi
  pushd .
  cd "${build_dir}/kotlin-language-server" && ./gradlew :server:installDist
  popd

  local b="${build_dir}/kotlin-language-server/server/build/install/server/bin/kotlin-language-server"
  if [[ ! -e "${b}" ]]; then
    echo "Error: ${b} not installed" >&2
  else
    echo ${b}
  fi
}

function dotfiles_install_sdkman()
{
  curl -s "https://get.sdkman.io" | bash
}

function dotfiles_setup_ssh_config()
{
  local home=${1:-${HOME}};
  local -r ssh_dir="${home}/.ssh"
  local -r ssh_config="${ssh_dir}/config"

  if [[ ! -e "${ssh_dir}" ]]; then
    mkdir "${ssh_dir}" && chmod 700 "${ssh_dir}"
  fi

  if [[ ! -e "${ssh_config}" ]]; then
    cat <<TOHERE > "${ssh_config}"
Include ~/dotfiles/dotfiles-secret/*/ssh/config
# Include ~/dotfiles/dotfiles-secret/global/ssh/config
# Include ~/dotfiles/dotfiles-secret/home/ssh/config
# Include ~/dotfiles/dotfiles-secret/ford/ssh/config

# vim: ts=4 sw=4 sts=0 expandtab ft=sshconfig
TOHERE
  fi
}

# vim: ts=2 sw=2 sts=0 ff=unix expandtab ft=sh :
