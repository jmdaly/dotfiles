#%Module1.0#####################################################################
##
## modules modulefile
##
## modulefiles/modules.  Generated from modules.in by configure.
##
proc ModulesHelp { } {
	global version prefix

  	puts stderr "\t3drf - loads the 3DRi build and run env"
}

module-whatis	"loads the 3DRi environment"

regsub {\..*$} [info hostname] "" hostname
if { [ regexp {_64} [exec uname -m] ] } {
	set ARCH "o2linux64"
} else {
	set ARCH "o2linux"
}

set HOME        $::env(HOME)
set BASE        "${HOME}/workspace/opal2"
set VENDOR      ${BASE}/${ARCH}
set BOOST_VERSION 1.56
set BOOST_ROOT  ${VENDOR}/Libs/boost/${BOOST_VERSION}
set src         ${BASE}/3dri
set app_rel     Apps/OPAL2
set bld_debug   ${BASE}/bld-3dri-${ARCH}-clang-debug
set bld_release ${BASE}/bld-3dri-${ARCH}-clang-release
set bld         ${bld_debug}

set apps        ${src}/${app_rel}
set appb        ${bld}/${app_rel}
set appb_debug  ${bld_debug}/${app_rel}

# Shortcuts
setenv src          ${src}
setenv bld          ${bld}
setenv apps         ${apps}
setenv appb         ${appb}
setenv appb_debug   ${appb_debug}

# Web Scheduler
set     ws_base     ${apps}/3DRiWebScheduler
set     wst         ${ws_base}/test
setenv  wss         ${ws_base}/src
setenv  wsi         ${ws_base}/include/3DRiWebScheduler
set     wsb         ${appb}/3DRiWebScheduler
set     wsb_debug   ${appb_debug}/3DRiWebScheduler
setenv  wsb         ${wsb}
setenv  wsb_debug   ${wsb_debug}

set port 8181

set-alias wsl "tail -f ${ws_base}/3dri.log | grep -v WebRequest"

# removed cwt call

set-alias db "sqlite3 ${apps}/3DRiWebScheduler/scan_schedule.db"

set-alias LcmSpy              "cd ${bld_debug}/lcm; ./RunLcmSpy.sh"
set-alias Opal2Gui            "cd ${appb}/Opal2Gui; ./Opal2Gui"
set-alias ForegroundSegmenter "cd ${appb}/DataProcessor/ForegroundSegmenter; ./ForegroundSegmenter"
set-alias ContourMapper       "cd ${appb}/DataProcessor/ContourMapper; ./ContourMapper"
set-alias StockpileMonitor    "cd ${appb}/DataProcessor/StockpileMonitor; ./StockpileMonitor"
set-alias SensorManager       "cd ${appb}/SensorManager; ./SensorManager"
set-alias LcmLogPlayer        "cd ${bld_debug}/lcm; ./RunLcmLogPlayer.sh"

# Examples
setenv wte /usr/lib/Wt/examples

# Rebuilt rtags.  Run from $bld or $bld_debug
set-alias BuildRTags "cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=1; rc -J ."

# PCL Binary lib paths
prepend-path LD_LIBRARY_PATH "${BOOST_ROOT}/lib"

# Building 3DRi
if { ${hostname} == "tinder" } {
	set QT_DIR "/opt/Qt/5.3/gcc_64"
} else {
	set QT_DIR "/opt/Qt5.3.2/5.3/gcc_64"
}
set     BUILD_TYPE    "Debug"
# Use clang.  To use g++, change the path to $(which g++)
if { ${hostname} == "khea" } {
	setenv  CXX           "ccache clang++-3.7"
} else {
	setenv  CXX            "ccache clang++"
	setenv  CCACHE_PREFIX  "distcc"
	# setenv  CCACHE_DIR     /media/ccache
	setenv  CCACHE_UMASK   002
	# setenv  CCACHE_BASEDIR $bld # This should be set by autoenv or something
	setenv  CCACHE_LOGFILE /tmp/ccache.log
}
set-alias build3dri   "cd ${bld}; cmake -GNinja -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DQT_DIR=${QT_DIR} ../3dri"

set-alias buildYcm    "/home/matt/dotfiles/bundles/YCM-Generator/config_gen.py -v -b cmake --qt-version 5 --configure_opts=-DQT_DIR=/opt/Qt5.3.2/5.3/gcc_64 ${src}"

# vim: ts=3 sw=3 sts=0 noet :
